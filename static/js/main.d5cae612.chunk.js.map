{"version":3,"sources":["utils.js","reducer.js","types.js","Day.js","Calendar.js","NumberField.js","DatePicker.js","App.js","index.js"],"names":["datesAreEqual","date1","date2","getFullYear","getMonth","getDate","dateIsAvailable","date","earliestAllowedDate","latestAllowedDate","createDayData","currentDate","firstDateInMonth","lastDateInMonth","selectedDate","today","currentDateOutsideMonth","dayOfMonth","isInCurrentMonth","available","selected","getWeekData","week","dayOfDate","getDay","Date","getTime","getFirstDateOfWeek","i","dayData","getNextDay","clonedDate","setDate","getMonthData","getFirstDateInMonth","getLastDateInMonth","weeksInMonth","nextDate","currentWeek","push","lastDateOfCurrentWeek","createOnDayChangedAction","type","payload","value","createOnMonthChangedAction","createOnYearChangedAction","createSelectDateAction","getNewProposedDateForDayChange","proposedDate","getNewProposedDateForMonthChange","getNewProposedDateForYearChange","reduceDatePartChanged","state","action","getNewProposedDate","inputFieldStateValue","isValid","warning","updatedProposedDate","dayInputFieldValue","monthInputFieldValue","yearInputFieldValue","reducer","pickerIsVisible","reduceHidePicker","reduceShowPicker","reduceOnDayChanged","reduceOnMonthChanged","reduceOnYearChanged","onChange","reduceSelectDate","undefined","reduceClearDate","Day","props","day","classNames","DatePickerContext","Consumer","context","dispatch","onClick","evt","className","join","CalendarHeader","Week","days","Calendar","weeks","map","index","key","month","toLocaleString","year","nextMonth","previousMonth","Button","iconBefore","size","appearance","NumberField","label","name","onChangeCreateAction","valueAttributeInState","htmlFor","Textfield","target","isCompact","React","createContext","DatePicker","initialState","useReducer","prevValueRef","useRef","useEffect","current","displayValue","toDateString","Provider","isOpen","onClose","placement","content","ButtonGroup","isDisabled","spacing","trigger","triggerProps","initialDate","console","log","App","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5cae612.chunk.js","sourcesContent":["// @flow\n\nimport type {\n  CreateDayData,\n  DatesAreEqual,\n  DateIsAvailable,\n  DateIsBeforeFirstDateInMonth,\n  DateIsAfterLastDateInMonth,\n  DayData,\n  GetFirstDateOfWeek,\n  GetWeekData,\n  GetNextDay,\n  GetFirstDateInMonth,\n  GetLastDateInMonth,\n  GetMonthData,\n  WeekData\n} from \"./types\";\n\nexport const oneDayInMilliseconds = 60 * 60 * 24 * 1000;\n\nexport const getFirstDateOfWeek: GetFirstDateOfWeek = ({ date }) => {\n  const dayOfDate = date.getDay();\n  return new Date(date.getTime() - dayOfDate * oneDayInMilliseconds);\n};\n\nexport const dateIsBeforeFirstDateInMonth: DateIsBeforeFirstDateInMonth = ({\n  currentDate,\n  firstDateInMonth\n}) => {\n  return currentDate < firstDateInMonth;\n};\n\nexport const dateIsAfterLastDateInMonth: DateIsAfterLastDateInMonth = ({\n  currentDate,\n  lastDateInMonth\n}) => {\n  return currentDate > lastDateInMonth;\n};\n\nexport const datesAreEqual: DatesAreEqual = ({ date1, date2 }) => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n};\n\nexport const dateIsAvailable: DateIsAvailable = ({\n  date,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  if (earliestAllowedDate && earliestAllowedDate > date) {\n    return false;\n  }\n  if (latestAllowedDate && latestAllowedDate < date) {\n    return false;\n  }\n  return true;\n};\n\nexport const createDayData: CreateDayData = ({\n  currentDate,\n  firstDateInMonth,\n  lastDateInMonth,\n  selectedDate,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const currentDateOutsideMonth =\n    dateIsBeforeFirstDateInMonth({ currentDate, firstDateInMonth }) ||\n    dateIsAfterLastDateInMonth({ currentDate, lastDateInMonth });\n\n  const dayData: DayData = {\n    dayOfMonth: currentDate.getDate(),\n    isInCurrentMonth: !currentDateOutsideMonth,\n    available: dateIsAvailable({\n      date: currentDate,\n      earliestAllowedDate,\n      latestAllowedDate\n    }),\n    selected: datesAreEqual({ date1: currentDate, date2: selectedDate }),\n    today: datesAreEqual({ date1: currentDate, date2: today }),\n    date: currentDate\n  };\n\n  return dayData;\n};\n\nexport const getWeekData: GetWeekData = ({\n  date,\n  firstDateInMonth,\n  lastDateInMonth,\n  selectedDate,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const firstDateInWeek = getFirstDateOfWeek({ date });\n\n  const week = {};\n\n  let currentDate = firstDateInWeek;\n  for (let i = 0; i < 7; i++) {\n    const dayData = createDayData({\n      currentDate,\n      firstDateInMonth,\n      lastDateInMonth,\n      selectedDate,\n      today,\n      earliestAllowedDate,\n      latestAllowedDate\n    });\n\n    const day = dayData.date.getDay();\n    week[day] = dayData;\n    currentDate = getNextDay({ date: currentDate });\n  }\n\n  return week;\n};\n\nexport const getNextDay: GetNextDay = ({ date }) => {\n  const clonedDate = new Date(date.getTime());\n  clonedDate.setDate(date.getDate() + 1);\n  return clonedDate;\n};\n\nexport const getFirstDateInMonth: GetFirstDateInMonth = ({ date }) => {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n};\n\nexport const getLastDateInMonth: GetLastDateInMonth = ({ date }) => {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n};\n\nexport const getMonthData: GetMonthData = ({\n  date,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const firstDateInMonth = getFirstDateInMonth({ date });\n  const lastDateInMonth = getLastDateInMonth({ date });\n\n  const weeksInMonth: WeekData[] = [];\n\n  let nextDate = firstDateInMonth;\n  do {\n    let currentWeek = getWeekData({\n      date: nextDate,\n      firstDateInMonth,\n      lastDateInMonth,\n      selectedDate: date,\n      today,\n      earliestAllowedDate,\n      latestAllowedDate\n    });\n    weeksInMonth.push(currentWeek);\n\n    let lastDateOfCurrentWeek = currentWeek[6].date;\n    nextDate = getNextDay({ date: lastDateOfCurrentWeek });\n  } while (nextDate < lastDateInMonth);\n\n  return weeksInMonth;\n};\n","// @flow\nimport { dateIsAvailable } from \"./utils\";\nimport type {\n  Action,\n  CreateClearDateAction,\n  CreateHidePickerAction,\n  CreateShowPickerAction,\n  CreateOnDayChangedAction,\n  CreateOnMonthChangedAction,\n  CreateOnYearChangedAction,\n  CreateSelectDateAction,\n  GetNewProposedDate,\n  ReduceHidePicker,\n  ReduceShowPicker,\n  ReduceDatePartChanged,\n  ReduceOnDayChanged,\n  ReduceOnMonthChanged,\n  ReduceOnYearChanged,\n  ReduceSelectDate,\n  ReduceClearDate,\n  State\n} from \"./types\";\nimport {\n  CLEAR_DATE_ACTION,\n  HIDE_PICKER_ACTION,\n  SHOW_PICKER_ACTION,\n  ON_DAY_CHANGED_ACTION,\n  ON_MONTH_CHANGED_ACTION,\n  ON_YEAR_CHANGED_ACTION,\n  SELECT_DATE_ACTION\n} from \"./types\";\n\nexport const createHidePickerAction: CreateHidePickerAction = () => {\n  return {\n    type: HIDE_PICKER_ACTION\n  };\n};\n\nexport const createShowPickerAction: CreateShowPickerAction = () => {\n  return {\n    type: SHOW_PICKER_ACTION\n  };\n};\n\nexport const createOnDayChangedAction: CreateOnDayChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_DAY_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createOnMonthChangedAction: CreateOnMonthChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_MONTH_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createOnYearChangedAction: CreateOnYearChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_YEAR_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createSelectDateAction: CreateSelectDateAction = ({ date }) => {\n  return {\n    type: SELECT_DATE_ACTION,\n    payload: {\n      date\n    }\n  };\n};\n\nexport const createClearDateAction: CreateClearDateAction = () => {\n  return {\n    type: CLEAR_DATE_ACTION\n  };\n};\n\nexport const getNewProposedDateForDayChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(proposedDate.getFullYear(), proposedDate.getMonth(), value);\n};\n\nexport const getNewProposedDateForMonthChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(\n    proposedDate.getFullYear(),\n    value - 1,\n    proposedDate.getDate()\n  );\n};\n\nexport const getNewProposedDateForYearChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(value, proposedDate.getMonth(), proposedDate.getDate());\n};\n\nconst reduceDatePartChanged: ReduceDatePartChanged = ({\n  state,\n  action,\n  getNewProposedDate,\n  inputFieldStateValue\n}) => {\n  const { proposedDate, earliestAllowedDate, latestAllowedDate } = state;\n  let {\n    payload: { value }\n  } = action;\n\n  // TODO: Ideally need to do a better job handling strange characters:\n  //       - ignore zeros\n  //       - could we always have 2 character day and month? (with leading zeroes)\n  if (value === \"\") {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to provide a full date\",\n      [inputFieldStateValue]: value\n    };\n  }\n\n  const updatedProposedDate = getNewProposedDate({ proposedDate, value });\n\n  if (\n    !dateIsAvailable({\n      date: updatedProposedDate,\n      earliestAllowedDate,\n      latestAllowedDate\n    })\n  ) {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to select a date within the allowed range\",\n      proposedDate: updatedProposedDate,\n      dayInputFieldValue: updatedProposedDate.getDate(),\n      monthInputFieldValue: updatedProposedDate.getMonth() + 1,\n      yearInputFieldValue: updatedProposedDate.getFullYear()\n    };\n  }\n\n  return {\n    ...state,\n    isValid: true,\n    warning: \"\",\n    proposedDate: updatedProposedDate,\n    dayInputFieldValue: updatedProposedDate.getDate(),\n    monthInputFieldValue: updatedProposedDate.getMonth() + 1,\n    yearInputFieldValue: updatedProposedDate.getFullYear()\n  };\n};\n\nconst reduceOnDayChanged: ReduceOnDayChanged = ({ state, action }) => {\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForDayChange,\n    inputFieldStateValue: \"dayInputFieldValue\"\n  });\n};\n\nconst reduceOnMonthChanged: ReduceOnMonthChanged = ({ state, action }) => {\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForMonthChange,\n    inputFieldStateValue: \"monthInputFieldValue\"\n  });\n};\n\nconst reduceOnYearChanged: ReduceOnYearChanged = ({ state, action }) => {\n  let {\n    payload: { value }\n  } = action;\n  if (value === \"\" || value < 1000) {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to provide a full date\",\n      yearInputFieldValue: value\n    };\n  }\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForYearChange,\n    inputFieldStateValue: \"yearInputFieldValue\"\n  });\n};\n\nconst reduceHidePicker: ReduceHidePicker = ({ state, action }) => {\n  const { isValid, proposedDate, selectedDate } = state;\n\n  if (!isValid) {\n    // If the picker isn't in a valid date when it's closed we need to ensure that\n    // it's reset. The proposed date should still be a valid date because it only gets\n    // updated when valid input is provided. It's important to reset validity and\n    // clear warnings and get back to a healthy state\n    return {\n      ...state,\n      proposedDate,\n      isValid: true,\n      warning: \"\",\n      pickerIsVisible: false,\n      dayInputFieldValue: proposedDate.getDate(),\n      monthInputFieldValue: proposedDate.getMonth() + 1,\n      yearInputFieldValue: proposedDate.getFullYear()\n    };\n  }\n\n  return {\n    ...state,\n    pickerIsVisible: false\n  };\n};\n\nconst reduceShowPicker: ReduceShowPicker = ({ state, action }) => {\n  return {\n    ...state,\n    pickerIsVisible: true\n  };\n};\n\nconst reduceSelectDate: ReduceSelectDate = ({ state, action }) => {\n  let {\n    payload: { date }\n  } = action;\n  const { earliestAllowedDate, latestAllowedDate } = state;\n\n  // Don't allow dates to be set if they are unavailable!\n  if (\n    !dateIsAvailable({\n      date,\n      earliestAllowedDate,\n      latestAllowedDate\n    })\n  ) {\n    return state;\n  }\n\n  const { onChange } = state;\n  if (onChange && typeof onChange === \"function\") {\n    onChange(date);\n  }\n\n  return {\n    ...state,\n    pickerIsVisible: false,\n    warning: \"\",\n    isValid: true,\n    selectedDate: date,\n    proposedDate: date,\n    dayInputFieldValue: date.getDate(),\n    monthInputFieldValue: date.getMonth() + 1,\n    yearInputFieldValue: date.getFullYear()\n  };\n};\n\nconst reduceClearDate: ReduceClearDate = ({ state, action }) => {\n  const date = new Date();\n  return {\n    ...state,\n    pickerIsVisible: false,\n    selectedDate: undefined,\n    proposedDate: date,\n    dayInputFieldValue: date.getDate(),\n    monthInputFieldValue: date.getMonth() + 1,\n    yearInputFieldValue: date.getFullYear()\n  };\n};\n\nexport function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case HIDE_PICKER_ACTION: {\n      return reduceHidePicker({ state, action });\n    }\n    case SHOW_PICKER_ACTION: {\n      return reduceShowPicker({ state, action });\n    }\n    case ON_DAY_CHANGED_ACTION: {\n      return reduceOnDayChanged({ state, action });\n    }\n    case ON_MONTH_CHANGED_ACTION: {\n      return reduceOnMonthChanged({ state, action });\n    }\n    case ON_YEAR_CHANGED_ACTION: {\n      return reduceOnYearChanged({ state, action });\n    }\n    case SELECT_DATE_ACTION: {\n      return reduceSelectDate({ state, action });\n    }\n    case CLEAR_DATE_ACTION: {\n      return reduceClearDate({ state, action });\n    }\n    default:\n      return state;\n  }\n}\n","// @flow\n\nexport const SHOW_PICKER_ACTION = \"showPicker\";\nexport const HIDE_PICKER_ACTION = \"hidePicker\";\nexport const ON_DAY_CHANGED_ACTION = \"onDayChanged\";\nexport const ON_MONTH_CHANGED_ACTION = \"onMonthChanged\";\nexport const ON_YEAR_CHANGED_ACTION = \"onYearChanged\";\nexport const SELECT_DATE_ACTION = \"selectDate\";\nexport const CLEAR_DATE_ACTION = \"clearDate\";\n\nexport type DatesAreEqual = ({ date1: Date, date2: Date }) => boolean;\nexport type DateIsBeforeFirstDateInMonth = ({\n  currentDate: Date,\n  firstDateInMonth: Date\n}) => boolean;\n\nexport type DateIsAfterLastDateInMonth = ({\n  currentDate: Date,\n  lastDateInMonth: Date\n}) => boolean;\n\nexport type DayData = {\n  dayOfMonth: number,\n  isInCurrentMonth: boolean,\n  available: boolean,\n  selected: boolean,\n  today: boolean,\n  date: Date\n};\n\nexport type CreateDayData = ({\n  currentDate: Date,\n  firstDateInMonth: Date,\n  lastDateInMonth: Date,\n  selectedDate: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => DayData;\n\nexport type WeekData = {\n  [number]: DayData\n};\n\nexport type GetFirstDayOfMonth = Date => number;\nexport type GetLastDateOfPreviousMonth = Date => number;\n\nexport type DateIsAvailable = ({\n  date: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => boolean;\n\nexport type GetWeekData = ({\n  date: Date,\n  firstDateInMonth: Date,\n  lastDateInMonth: Date,\n  selectedDate: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => WeekData;\n\nexport type GetFirstDateOfWeek = ({ date: Date }) => Date;\n\nexport type GetFirstDateInMonth = ({ date: Date }) => Date;\nexport type GetLastDateInMonth = ({ date: Date }) => Date;\nexport type GetNextDay = ({ date: Date }) => Date;\n\nexport type GetMonthData = ({\n  date: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => WeekData[];\n\nexport type OnChange = (value?: Date) => void;\n\nexport type State = {\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date,\n  pickerIsVisible: boolean,\n  isValid: boolean,\n  proposedDate: Date,\n  selectedDate?: Date,\n  dayInputFieldValue: number | \"\",\n  monthInputFieldValue: number | \"\",\n  yearInputFieldValue: number | \"\",\n  warning?: string,\n  onChange?: OnChange\n};\n\nexport type DatePickerProps = {\n  value?: Date,\n  isDisabled?: boolean, // TODO: This needs handling\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date,\n  onChange?: OnChange\n};\nexport type CalendarProps = {\n  date: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n};\n\nexport type ShowPickerAction = {\n  type: typeof SHOW_PICKER_ACTION\n};\n\nexport type HidePickerAction = {\n  type: typeof HIDE_PICKER_ACTION\n};\n\nexport type OnDayChangedAction = {\n  type: typeof ON_DAY_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type OnMonthChangedAction = {\n  type: typeof ON_MONTH_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type OnYearChangedAction = {\n  type: typeof ON_YEAR_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type SelectDateAction = {\n  type: typeof SELECT_DATE_ACTION,\n  payload: {\n    date: Date\n  }\n};\n\nexport type ClearDateAction = {\n  type: typeof CLEAR_DATE_ACTION\n};\n\nexport type CreateShowPickerAction = () => ShowPickerAction;\nexport type CreateHidePickerAction = () => HidePickerAction;\nexport type CreateOnDayChangedAction = ({\n  value: number\n}) => OnDayChangedAction;\nexport type CreateOnMonthChangedAction = ({\n  value: number\n}) => OnMonthChangedAction;\nexport type CreateOnYearChangedAction = ({\n  value: number\n}) => OnYearChangedAction;\nexport type CreateSelectDateAction = ({ date: Date }) => SelectDateAction;\nexport type CreateClearDateAction = () => ClearDateAction;\n\nexport type OnChangeCreateAction =\n  | CreateOnDayChangedAction\n  | CreateOnMonthChangedAction\n  | CreateOnYearChangedAction;\nexport type InputFieldStateValue =\n  | \"dayInputFieldValue\"\n  | \"monthInputFieldValue\"\n  | \"yearInputFieldValue\";\n\nexport type Action =\n  | HidePickerAction\n  | ShowPickerAction\n  | OnDayChangedAction\n  | OnMonthChangedAction\n  | OnYearChangedAction\n  | SelectDateAction\n  | ClearDateAction;\n\nexport type DispatchAction = Action => void;\n\nexport type ContextType = {\n  dispatch: DispatchAction,\n  state: State\n};\n\nexport type CreateContext = ({\n  state: State,\n  dispatch: DispatchAction\n}) => ContextType;\n\nexport type GetNewProposedDate = ({\n  proposedDate: Date,\n  value: number\n}) => Date;\n\nexport type ReduceDatePartChanged = ({\n  state: State,\n  action: OnDayChangedAction | OnMonthChangedAction | OnYearChangedAction,\n  getNewProposedDate: GetNewProposedDate,\n  inputFieldStateValue: InputFieldStateValue\n}) => State;\n\nexport type ReduceOnDayChanged = ({\n  state: State,\n  action: OnDayChangedAction\n}) => State;\n\nexport type ReduceOnMonthChanged = ({\n  state: State,\n  action: OnMonthChangedAction\n}) => State;\n\nexport type ReduceOnYearChanged = ({\n  state: State,\n  action: OnYearChangedAction\n}) => State;\n\nexport type ReduceHidePicker = ({\n  state: State,\n  action: HidePickerAction\n}) => State;\n\nexport type ReduceShowPicker = ({\n  state: State,\n  action: ShowPickerAction\n}) => State;\n\nexport type ReduceSelectDate = ({\n  state: State,\n  action: SelectDateAction\n}) => State;\n\nexport type ReduceClearDate = ({ state: State, action: Action }) => State;\n","// @flow\n\nimport React from \"react\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport { createSelectDateAction } from \"./reducer\";\nimport type { DayData } from \"./types\";\nimport \"./Day.css\";\n\nexport type DayProps = {\n  day: DayData\n};\n\nexport default function Day(props: DayProps) {\n  const { day } = props;\n  const {\n    available,\n    selected,\n    isInCurrentMonth,\n    dayOfMonth,\n    date,\n    today\n  } = day;\n\n  const classNames = [];\n  if (selected) {\n    classNames.push(\"selected\");\n  }\n  if (isInCurrentMonth) {\n    classNames.push(\"isInCurrentMonth\");\n  }\n  if (today) {\n    classNames.push(\"today\");\n  }\n  if (!available) {\n    classNames.push(\"unavailable\");\n  }\n\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { dispatch } = context;\n        return (\n          <td\n            onClick={evt =>\n              available && dispatch(createSelectDateAction({ date }))\n            }\n          >\n            <div className={classNames.join(\" \")}>{dayOfMonth}</div>\n          </td>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\n\nimport React from \"react\";\nimport Button from \"@atlaskit/button\";\nimport ChevronRightIcon from \"@atlaskit/icon/glyph/chevron-right\";\nimport ChevronLeftIcon from \"@atlaskit/icon/glyph/chevron-left\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport Day from \"./Day\";\nimport { createOnMonthChangedAction } from \"./reducer\";\nimport { getMonthData } from \"./utils\";\nimport type { CalendarProps, WeekData } from \"./types\";\nimport \"./Calendar.css\";\n\nfunction CalendarHeader() {\n  return (\n    <thead>\n      <tr>\n        <th>SUN</th>\n        <th>MON</th>\n        <th>TUE</th>\n        <th>WED</th>\n        <th>THU</th>\n        <th>FRI</th>\n        <th>SAT</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport type WeekProps = {\n  days: WeekData\n};\n\nfunction Week(props: WeekProps) {\n  const { days } = props;\n\n  return (\n    <tr>\n      <Day day={days[0]} />\n      <Day day={days[1]} />\n      <Day day={days[2]} />\n      <Day day={days[3]} />\n      <Day day={days[4]} />\n      <Day day={days[5]} />\n      <Day day={days[6]} />\n    </tr>\n  );\n}\n\nexport default function Calendar(props: CalendarProps) {\n  const { date, earliestAllowedDate, latestAllowedDate } = props;\n  const today = new Date();\n  const weeksInMonth = getMonthData({\n    date,\n    today,\n    earliestAllowedDate,\n    latestAllowedDate\n  });\n  const weeks = weeksInMonth.map((week, index) => (\n    <Week key={`week_${index}`} days={week} />\n  ));\n\n  const month = date.toLocaleString(\"default\", { month: \"long\" });\n  const year = date.getFullYear();\n\n  // NOTE: Months are zero-indexed, but the month field is not hence adding 2 and not substracting anything!\n  const nextMonth = date.getMonth() + 2;\n  const previousMonth = date.getMonth();\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { dispatch } = context;\n        return (\n          <div className=\"calendar\">\n            <div className=\"monthDisplay\">\n              <Button\n                iconBefore={<ChevronLeftIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnMonthChangedAction({ value: previousMonth }))\n                }\n              />\n              <span>\n                {month} {year}\n              </span>\n\n              <Button\n                iconBefore={<ChevronRightIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnMonthChangedAction({ value: nextMonth }))\n                }\n              />\n            </div>\n            <table className=\"week\">\n              <CalendarHeader />\n              <tbody>{weeks}</tbody>\n            </table>\n          </div>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\nimport React from \"react\";\nimport Textfield from \"@atlaskit/textfield\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport type { InputFieldStateValue, OnChangeCreateAction } from \"./types\";\nimport \"./NumberField.css\";\n\nexport type NumberFieldProps = {\n  label: string,\n  name: string,\n  onChangeCreateAction: OnChangeCreateAction,\n  valueAttributeInState: InputFieldStateValue\n};\nexport default function NumberField(props: NumberFieldProps) {\n  const { label, name, onChangeCreateAction, valueAttributeInState } = props;\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { state, dispatch } = context;\n        return (\n          <div className=\"number\">\n            <label htmlFor={name}>{label}</label>\n            <Textfield\n              name={name}\n              type=\"number\"\n              value={state[valueAttributeInState]}\n              onChange={evt =>\n                dispatch(onChangeCreateAction({ value: evt.target.value }))\n              }\n              isCompact\n            />\n          </div>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\n\nimport React, { useReducer, useEffect, useRef } from \"react\";\nimport Popup from \"@atlaskit/popup\";\nimport Button, { ButtonGroup } from \"@atlaskit/button\";\nimport EditorEditIcon from \"@atlaskit/icon/glyph/editor/edit\";\nimport EditorDoneIcon from \"@atlaskit/icon/glyph/editor/done\";\nimport EditorCloseIcon from \"@atlaskit/icon/glyph/editor/close\";\nimport EditorRemoveIcon from \"@atlaskit/icon/glyph/editor/remove\";\nimport Calendar from \"./Calendar\";\nimport NumberField from \"./NumberField\";\nimport {\n  createShowPickerAction,\n  createHidePickerAction,\n  createOnDayChangedAction,\n  createOnMonthChangedAction,\n  createOnYearChangedAction,\n  createClearDateAction,\n  reducer,\n  createSelectDateAction\n} from \"./reducer\";\nimport type { CreateContext, DatePickerProps, State } from \"./types\";\nimport \"./DatePicker.css\";\n\n// $FlowFixMe\nexport const DatePickerContext = React.createContext();\n\nexport const createContext: CreateContext = ({ state, dispatch }) => ({\n  state,\n  dispatch\n});\n\nexport default function DatePicker(props: DatePickerProps) {\n  const { value, earliestAllowedDate, latestAllowedDate, onChange } = props;\n\n  const proposedDate = value || new Date(); // Default to today when there is no value provided\n\n  const dayInputFieldValue = proposedDate.getDate();\n  const monthInputFieldValue = proposedDate.getMonth() + 1; // Need to add 1 to move from 0 indexed months\n  const yearInputFieldValue = proposedDate.getFullYear();\n\n  const initialState: State = {\n    isValid: true,\n    pickerIsVisible: false,\n    selectedDate: value, // This could legitimately be undefined when no date is set\n    proposedDate,\n    dayInputFieldValue,\n    monthInputFieldValue,\n    yearInputFieldValue,\n    earliestAllowedDate,\n    latestAllowedDate,\n    onChange\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const context = createContext({ state, dispatch });\n\n  // This is an attempt to track changing in prop value, to update the selected date...\n  // However, this updates on each render and we need to be able to process more than once\n  const prevValueRef = useRef();\n  useEffect(() => {\n    if (prevValueRef.current !== value) {\n      if (value) {\n        dispatch(createSelectDateAction({ date: value }));\n      } else {\n        dispatch(createClearDateAction());\n      }\n    }\n    // TODO: Can only set a value via props once, because the prop isn't changing\n    prevValueRef.current = value;\n  });\n\n  const displayValue = state.selectedDate\n    ? state.selectedDate.toDateString()\n    : \"\";\n  return (\n    <DatePickerContext.Provider value={context}>\n      <Popup\n        isOpen={state.pickerIsVisible}\n        onClose={() => dispatch(createHidePickerAction())}\n        placement=\"bottom-start\"\n        content={() => (\n          <div className=\"main\">\n            <div className=\"picker\">\n              <div className=\"input-row\">\n                <NumberField\n                  label=\"Day\"\n                  name=\"day\"\n                  onChangeCreateAction={createOnDayChangedAction}\n                  valueAttributeInState=\"dayInputFieldValue\"\n                />\n                <NumberField\n                  label=\"Month\"\n                  name=\"month\"\n                  onChangeCreateAction={createOnMonthChangedAction}\n                  valueAttributeInState=\"monthInputFieldValue\"\n                />\n                <NumberField\n                  label=\"Year\"\n                  name=\"year\"\n                  onChangeCreateAction={createOnYearChangedAction}\n                  valueAttributeInState=\"yearInputFieldValue\"\n                />\n                <ButtonGroup>\n                  <Button\n                    iconBefore={<EditorDoneIcon size=\"small\" />}\n                    appearance=\"subtle\"\n                    isDisabled={!state.isValid}\n                    onClick={evt =>\n                      dispatch(\n                        createSelectDateAction({ date: state.proposedDate })\n                      )\n                    }\n                    spacing=\"compact\"\n                  />\n                  <Button\n                    iconBefore={<EditorCloseIcon size=\"small\" />}\n                    appearance=\"subtle\"\n                    onClick={evt => dispatch(createHidePickerAction())}\n                    spacing=\"compact\"\n                  />\n                </ButtonGroup>\n              </div>\n              <Calendar\n                date={state.proposedDate}\n                earliestAllowedDate={state.earliestAllowedDate}\n                latestAllowedDate={state.latestAllowedDate}\n              />\n              {state.warning && (\n                <div className=\"warnings\">\n                  <span>{state.warning}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        trigger={triggerProps => (\n          <div className=\"display\" {...triggerProps}>\n            <span>{displayValue}</span>\n            <ButtonGroup>\n              <Button\n                iconBefore={<EditorEditIcon size=\"small\" />}\n                isDisabled={!state.isValid}\n                onClick={evt => dispatch(createShowPickerAction())}\n                spacing=\"compact\"\n              />\n              <Button\n                iconBefore={<EditorRemoveIcon size=\"small\" />}\n                onClick={evt => dispatch(createClearDateAction())}\n                spacing=\"compact\"\n              />\n            </ButtonGroup>\n          </div>\n        )}\n      />\n    </DatePickerContext.Provider>\n  );\n}\n","// @flow\nimport React, { useState } from \"react\";\nimport DatePicker from \"./DatePicker\";\nimport \"./App.css\";\n\nconst initialDate = new Date();\nconst earliestAllowedDate = new Date();\nearliestAllowedDate.setDate(-45);\nconst latestAllowedDate = new Date();\nlatestAllowedDate.setDate(45);\n\nconst inAWeek = new Date();\ninAWeek.setDate(7);\nconst onChange = date => console.log(\"Date changed to\", date);\n\nfunction App() {\n  const [date, setDate] = useState(initialDate);\n  return (\n    <div className=\"app\">\n      {/* <button type=\"button\" onClick={() => setDate(inAWeek)}>\n        Set to a week from now\n      </button> */}\n\n      <DatePicker\n        value={date}\n        earliestAllowedDate={earliestAllowedDate}\n        latestAllowedDate={latestAllowedDate}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}