{"version":3,"sources":["actions.js","types.js","Day.js","utils.js","Calendar.js","NumberField.js","reducer.js","DatePicker.js","App.js","index.js"],"names":["createOnDayChangedAction","type","payload","value","createOnMonthChangedAction","createOnYearChangedAction","createSelectDateAction","date","Day","props","day","available","selected","isInCurrentMonth","dayOfMonth","today","classNames","push","DatePickerContext","Consumer","context","dispatch","onClick","evt","className","join","datesAreEqual","date1","date2","getFullYear","getMonth","getDate","dateIsAvailable","earliestAllowedDate","latestAllowedDate","createDayData","currentDate","firstDateInMonth","lastDateInMonth","selectedDate","currentDateOutsideMonth","getWeekData","week","dayOfDate","getDay","Date","getTime","getFirstDateOfWeek","i","dayData","getNextDay","clonedDate","setDate","getMonthData","getFirstDateInMonth","getLastDateInMonth","weeksInMonth","nextDate","currentWeek","lastDateOfCurrentWeek","CalendarHeader","Week","days","Calendar","weeks","map","index","key","month","toLocaleString","year","nextMonth","previousMonth","nextYear","previousYear","Button","iconBefore","size","appearance","NumberField","label","name","onChangeCreateAction","valueAttributeInState","state","htmlFor","Textfield","onChange","target","isCompact","getNewProposedDateForDayChange","proposedDate","getNewProposedDateForMonthChange","getNewProposedDateForYearChange","reduceDatePartChanged","action","getNewProposedDate","inputFieldStateValue","isValid","warning","updatedProposedDate","dayInputFieldValue","monthInputFieldValue","yearInputFieldValue","reducer","pickerIsVisible","reduceHidePicker","reduceShowPicker","reduceOnDayChanged","reduceOnMonthChanged","reduceOnYearChanged","reduceSelectDate","undefined","reduceClearDate","reduceSetConstraints","React","createContext","DatePicker","initialState","useReducer","ref","useRef","useEffect","previousProps","current","previousEarliestAllowedDate","previousLatestAllowedDate","displayValue","toDateString","Provider","isOpen","onClose","placement","content","ButtonGroup","isDisabled","spacing","trigger","triggerProps","initialDate","inAWeek","App","useState","earliest","setEarliest","latest","setLatest","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35d892cd.chunk.js","sourcesContent":["// @flow\nimport type {\n  CreateClearDateAction,\n  CreateHidePickerAction,\n  CreateShowPickerAction,\n  CreateOnDayChangedAction,\n  CreateOnMonthChangedAction,\n  CreateOnYearChangedAction,\n  CreateSelectDateAction,\n  CreateSetConstraintsAction\n} from \"./types\";\nimport {\n  CLEAR_DATE_ACTION,\n  HIDE_PICKER_ACTION,\n  SHOW_PICKER_ACTION,\n  ON_DAY_CHANGED_ACTION,\n  ON_MONTH_CHANGED_ACTION,\n  ON_YEAR_CHANGED_ACTION,\n  SELECT_DATE_ACTION,\n  SET_CONSTRAINTS_ACTION\n} from \"./types\";\n\nexport const createHidePickerAction: CreateHidePickerAction = () => {\n  return {\n    type: HIDE_PICKER_ACTION\n  };\n};\n\nexport const createShowPickerAction: CreateShowPickerAction = () => {\n  return {\n    type: SHOW_PICKER_ACTION\n  };\n};\n\nexport const createOnDayChangedAction: CreateOnDayChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_DAY_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createOnMonthChangedAction: CreateOnMonthChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_MONTH_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createOnYearChangedAction: CreateOnYearChangedAction = ({\n  value\n}) => {\n  return {\n    type: ON_YEAR_CHANGED_ACTION,\n    payload: {\n      value\n    }\n  };\n};\n\nexport const createSelectDateAction: CreateSelectDateAction = ({ date }) => {\n  return {\n    type: SELECT_DATE_ACTION,\n    payload: {\n      date\n    }\n  };\n};\n\nexport const createClearDateAction: CreateClearDateAction = () => {\n  return {\n    type: CLEAR_DATE_ACTION\n  };\n};\n\nexport const createSetConstraintsAction: CreateSetConstraintsAction = ({\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  return {\n    type: SET_CONSTRAINTS_ACTION,\n    payload: {\n      earliestAllowedDate,\n      latestAllowedDate\n    }\n  };\n};\n","// @flow\n\nexport const SHOW_PICKER_ACTION = \"showPicker\";\nexport const HIDE_PICKER_ACTION = \"hidePicker\";\nexport const ON_DAY_CHANGED_ACTION = \"onDayChanged\";\nexport const ON_MONTH_CHANGED_ACTION = \"onMonthChanged\";\nexport const ON_YEAR_CHANGED_ACTION = \"onYearChanged\";\nexport const SELECT_DATE_ACTION = \"selectDate\";\nexport const CLEAR_DATE_ACTION = \"clearDate\";\nexport const SET_CONSTRAINTS_ACTION = \"setConstraints\";\n\nexport type DatesAreEqual = ({ date1: Date, date2: Date }) => boolean;\nexport type DateIsBeforeFirstDateInMonth = ({\n  currentDate: Date,\n  firstDateInMonth: Date\n}) => boolean;\n\nexport type DateIsAfterLastDateInMonth = ({\n  currentDate: Date,\n  lastDateInMonth: Date\n}) => boolean;\n\nexport type DayData = {\n  dayOfMonth: number,\n  isInCurrentMonth: boolean,\n  available: boolean,\n  selected: boolean,\n  today: boolean,\n  date: Date\n};\n\nexport type CreateDayData = ({\n  currentDate: Date,\n  firstDateInMonth: Date,\n  lastDateInMonth: Date,\n  selectedDate: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => DayData;\n\nexport type WeekData = {\n  [number]: DayData\n};\n\nexport type GetFirstDayOfMonth = Date => number;\nexport type GetLastDateOfPreviousMonth = Date => number;\n\nexport type DateIsAvailable = ({\n  date: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => boolean;\n\nexport type GetWeekData = ({\n  date: Date,\n  firstDateInMonth: Date,\n  lastDateInMonth: Date,\n  selectedDate: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => WeekData;\n\nexport type GetFirstDateOfWeek = ({ date: Date }) => Date;\n\nexport type GetFirstDateInMonth = ({ date: Date }) => Date;\nexport type GetLastDateInMonth = ({ date: Date }) => Date;\nexport type GetNextDay = ({ date: Date }) => Date;\n\nexport type GetMonthData = ({\n  date: Date,\n  today: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => WeekData[];\n\nexport type OnChange = (value?: Date) => void;\n\nexport type State = {\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date,\n  pickerIsVisible: boolean,\n  isValid: boolean,\n  proposedDate: Date,\n  selectedDate?: Date,\n  dayInputFieldValue: number | \"\",\n  monthInputFieldValue: number | \"\",\n  yearInputFieldValue: number | \"\",\n  warning?: string,\n  onChange?: OnChange\n};\n\nexport type DatePickerProps = {\n  value?: Date,\n  isDisabled?: boolean, // TODO: This needs handling\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date,\n  onChange?: OnChange\n};\nexport type CalendarProps = {\n  date: Date,\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n};\n\nexport type ShowPickerAction = {\n  type: typeof SHOW_PICKER_ACTION\n};\n\nexport type HidePickerAction = {\n  type: typeof HIDE_PICKER_ACTION\n};\n\nexport type OnDayChangedAction = {\n  type: typeof ON_DAY_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type OnMonthChangedAction = {\n  type: typeof ON_MONTH_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type OnYearChangedAction = {\n  type: typeof ON_YEAR_CHANGED_ACTION,\n  payload: {\n    value: number\n  }\n};\nexport type SelectDateAction = {\n  type: typeof SELECT_DATE_ACTION,\n  payload: {\n    date: Date\n  }\n};\n\nexport type SetConstraintsAction = {\n  type: typeof SET_CONSTRAINTS_ACTION,\n  payload: {\n    earliestAllowedDate?: Date,\n    latestAllowedDate?: Date\n  }\n};\n\nexport type ClearDateAction = {\n  type: typeof CLEAR_DATE_ACTION\n};\n\nexport type CreateShowPickerAction = () => ShowPickerAction;\nexport type CreateHidePickerAction = () => HidePickerAction;\nexport type CreateOnDayChangedAction = ({\n  value: number\n}) => OnDayChangedAction;\nexport type CreateOnMonthChangedAction = ({\n  value: number\n}) => OnMonthChangedAction;\nexport type CreateOnYearChangedAction = ({\n  value: number\n}) => OnYearChangedAction;\nexport type CreateSelectDateAction = ({ date: Date }) => SelectDateAction;\nexport type CreateClearDateAction = () => ClearDateAction;\nexport type CreateSetConstraintsAction = ({\n  earliestAllowedDate?: Date,\n  latestAllowedDate?: Date\n}) => SetConstraintsAction;\n\nexport type OnChangeCreateAction =\n  | CreateOnDayChangedAction\n  | CreateOnMonthChangedAction\n  | CreateOnYearChangedAction;\nexport type InputFieldStateValue =\n  | \"dayInputFieldValue\"\n  | \"monthInputFieldValue\"\n  | \"yearInputFieldValue\";\n\nexport type Action =\n  | HidePickerAction\n  | ShowPickerAction\n  | OnDayChangedAction\n  | OnMonthChangedAction\n  | OnYearChangedAction\n  | SelectDateAction\n  | ClearDateAction\n  | SetConstraintsAction;\n\nexport type DispatchAction = Action => void;\n\nexport type ContextType = {\n  dispatch: DispatchAction,\n  state: State\n};\n\nexport type CreateContext = ({\n  state: State,\n  dispatch: DispatchAction\n}) => ContextType;\n\nexport type GetNewProposedDate = ({\n  proposedDate: Date,\n  value: number\n}) => Date;\n\nexport type ReduceDatePartChanged = ({\n  state: State,\n  action: OnDayChangedAction | OnMonthChangedAction | OnYearChangedAction,\n  getNewProposedDate: GetNewProposedDate,\n  inputFieldStateValue: InputFieldStateValue\n}) => State;\n\nexport type ReduceOnDayChanged = ({\n  state: State,\n  action: OnDayChangedAction\n}) => State;\n\nexport type ReduceOnMonthChanged = ({\n  state: State,\n  action: OnMonthChangedAction\n}) => State;\n\nexport type ReduceOnYearChanged = ({\n  state: State,\n  action: OnYearChangedAction\n}) => State;\n\nexport type ReduceHidePicker = ({\n  state: State,\n  action: HidePickerAction\n}) => State;\n\nexport type ReduceShowPicker = ({\n  state: State,\n  action: ShowPickerAction\n}) => State;\n\nexport type ReduceSelectDate = ({\n  state: State,\n  action: SelectDateAction\n}) => State;\n\nexport type ReduceClearDate = ({\n  state: State,\n  action: ClearDateAction\n}) => State;\n\nexport type ReduceSetConstraints = ({\n  state: State,\n  action: SetConstraintsAction\n}) => State;\n","// @flow\n\nimport React from \"react\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport { createSelectDateAction } from \"./actions\";\nimport type { DayData } from \"./types\";\nimport \"./Day.css\";\n\nexport type DayProps = {\n  day: DayData\n};\n\nexport default function Day(props: DayProps) {\n  const { day } = props;\n  const {\n    available,\n    selected,\n    isInCurrentMonth,\n    dayOfMonth,\n    date,\n    today\n  } = day;\n\n  const classNames = [];\n  if (selected) {\n    classNames.push(\"selected\");\n  }\n  if (isInCurrentMonth) {\n    classNames.push(\"isInCurrentMonth\");\n  }\n  if (today) {\n    classNames.push(\"today\");\n  }\n  if (!available) {\n    classNames.push(\"unavailable\");\n  }\n\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { dispatch } = context;\n        return (\n          <td\n            onClick={evt =>\n              available && dispatch(createSelectDateAction({ date }))\n            }\n          >\n            <div className={classNames.join(\" \")}>{dayOfMonth}</div>\n          </td>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\n\nimport type {\n  CreateDayData,\n  DatesAreEqual,\n  DateIsAvailable,\n  DateIsBeforeFirstDateInMonth,\n  DateIsAfterLastDateInMonth,\n  DayData,\n  GetFirstDateOfWeek,\n  GetWeekData,\n  GetNextDay,\n  GetFirstDateInMonth,\n  GetLastDateInMonth,\n  GetMonthData,\n  WeekData\n} from \"./types\";\n\nexport const oneDayInMilliseconds = 60 * 60 * 24 * 1000;\n\nexport const getFirstDateOfWeek: GetFirstDateOfWeek = ({ date }) => {\n  const dayOfDate = date.getDay();\n  return new Date(date.getTime() - dayOfDate * oneDayInMilliseconds);\n};\n\nexport const dateIsBeforeFirstDateInMonth: DateIsBeforeFirstDateInMonth = ({\n  currentDate,\n  firstDateInMonth\n}) => {\n  return currentDate < firstDateInMonth;\n};\n\nexport const dateIsAfterLastDateInMonth: DateIsAfterLastDateInMonth = ({\n  currentDate,\n  lastDateInMonth\n}) => {\n  return currentDate > lastDateInMonth;\n};\n\nexport const datesAreEqual: DatesAreEqual = ({ date1, date2 }) => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n};\n\nexport const dateIsAvailable: DateIsAvailable = ({\n  date,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  if (earliestAllowedDate && earliestAllowedDate > date) {\n    return false;\n  }\n  if (latestAllowedDate && latestAllowedDate < date) {\n    return false;\n  }\n  return true;\n};\n\nexport const createDayData: CreateDayData = ({\n  currentDate,\n  firstDateInMonth,\n  lastDateInMonth,\n  selectedDate,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const currentDateOutsideMonth =\n    dateIsBeforeFirstDateInMonth({ currentDate, firstDateInMonth }) ||\n    dateIsAfterLastDateInMonth({ currentDate, lastDateInMonth });\n\n  const dayData: DayData = {\n    dayOfMonth: currentDate.getDate(),\n    isInCurrentMonth: !currentDateOutsideMonth,\n    available: dateIsAvailable({\n      date: currentDate,\n      earliestAllowedDate,\n      latestAllowedDate\n    }),\n    selected: datesAreEqual({ date1: currentDate, date2: selectedDate }),\n    today: datesAreEqual({ date1: currentDate, date2: today }),\n    date: currentDate\n  };\n\n  return dayData;\n};\n\nexport const getWeekData: GetWeekData = ({\n  date,\n  firstDateInMonth,\n  lastDateInMonth,\n  selectedDate,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const firstDateInWeek = getFirstDateOfWeek({ date });\n\n  const week = {};\n\n  let currentDate = firstDateInWeek;\n  for (let i = 0; i < 7; i++) {\n    const dayData = createDayData({\n      currentDate,\n      firstDateInMonth,\n      lastDateInMonth,\n      selectedDate,\n      today,\n      earliestAllowedDate,\n      latestAllowedDate\n    });\n\n    const day = dayData.date.getDay();\n    week[day] = dayData;\n    currentDate = getNextDay({ date: currentDate });\n  }\n\n  return week;\n};\n\nexport const getNextDay: GetNextDay = ({ date }) => {\n  const clonedDate = new Date(date.getTime());\n  clonedDate.setDate(date.getDate() + 1);\n  return clonedDate;\n};\n\nexport const getFirstDateInMonth: GetFirstDateInMonth = ({ date }) => {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n};\n\nexport const getLastDateInMonth: GetLastDateInMonth = ({ date }) => {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n};\n\nexport const getMonthData: GetMonthData = ({\n  date,\n  today,\n  earliestAllowedDate,\n  latestAllowedDate\n}) => {\n  const firstDateInMonth = getFirstDateInMonth({ date });\n  const lastDateInMonth = getLastDateInMonth({ date });\n\n  const weeksInMonth: WeekData[] = [];\n\n  let nextDate = firstDateInMonth;\n  do {\n    let currentWeek = getWeekData({\n      date: nextDate,\n      firstDateInMonth,\n      lastDateInMonth,\n      selectedDate: date,\n      today,\n      earliestAllowedDate,\n      latestAllowedDate\n    });\n    weeksInMonth.push(currentWeek);\n\n    let lastDateOfCurrentWeek = currentWeek[6].date;\n    nextDate = getNextDay({ date: lastDateOfCurrentWeek });\n  } while (nextDate < lastDateInMonth);\n\n  return weeksInMonth;\n};\n","// @flow\n\nimport React from \"react\";\nimport Button from \"@atlaskit/button\";\nimport ChevronRightIcon from \"@atlaskit/icon/glyph/chevron-right\";\nimport ChevronLeftIcon from \"@atlaskit/icon/glyph/chevron-left\";\nimport ChevronRightLargeIcon from \"@atlaskit/icon/glyph/chevron-right-large\";\nimport ChevronLeftLargeIcon from \"@atlaskit/icon/glyph/chevron-left-large\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport Day from \"./Day\";\nimport {\n  createOnMonthChangedAction,\n  createOnYearChangedAction\n} from \"./actions\";\nimport { getMonthData } from \"./utils\";\nimport type { CalendarProps, WeekData } from \"./types\";\nimport \"./Calendar.css\";\n\nfunction CalendarHeader() {\n  return (\n    <thead>\n      <tr>\n        <th>SUN</th>\n        <th>MON</th>\n        <th>TUE</th>\n        <th>WED</th>\n        <th>THU</th>\n        <th>FRI</th>\n        <th>SAT</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport type WeekProps = {\n  days: WeekData\n};\n\nfunction Week(props: WeekProps) {\n  const { days } = props;\n\n  return (\n    <tr>\n      <Day day={days[0]} />\n      <Day day={days[1]} />\n      <Day day={days[2]} />\n      <Day day={days[3]} />\n      <Day day={days[4]} />\n      <Day day={days[5]} />\n      <Day day={days[6]} />\n    </tr>\n  );\n}\n\nexport default function Calendar(props: CalendarProps) {\n  const { date, earliestAllowedDate, latestAllowedDate } = props;\n  const today = new Date();\n  const weeksInMonth = getMonthData({\n    date,\n    today,\n    earliestAllowedDate,\n    latestAllowedDate\n  });\n  const weeks = weeksInMonth.map((week, index) => (\n    <Week key={`week_${index}`} days={week} />\n  ));\n\n  const month = date.toLocaleString(\"default\", { month: \"long\" });\n  const year = date.getFullYear();\n\n  // NOTE: Months are zero-indexed, but the month field is not hence adding 2 and not substracting anything!\n  const nextMonth = date.getMonth() + 2;\n  const previousMonth = date.getMonth();\n  const nextYear = date.getFullYear() + 1;\n  const previousYear = date.getFullYear() - 1;\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { dispatch } = context;\n        return (\n          <div className=\"calendar\">\n            <div className=\"monthDisplay\">\n              <Button\n                iconBefore={<ChevronLeftLargeIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnYearChangedAction({ value: previousYear }))\n                }\n              />\n              <Button\n                iconBefore={<ChevronLeftIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnMonthChangedAction({ value: previousMonth }))\n                }\n              />\n              <span>\n                {month} {year}\n              </span>\n\n              <Button\n                iconBefore={<ChevronRightIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnMonthChangedAction({ value: nextMonth }))\n                }\n              />\n              <Button\n                iconBefore={<ChevronRightLargeIcon size=\"small\" />}\n                appearance=\"subtle\"\n                onClick={evt =>\n                  dispatch(createOnYearChangedAction({ value: nextYear }))\n                }\n              />\n            </div>\n            <table className=\"week\">\n              <CalendarHeader />\n              <tbody>{weeks}</tbody>\n            </table>\n          </div>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\nimport React from \"react\";\nimport Textfield from \"@atlaskit/textfield\";\nimport { DatePickerContext } from \"./DatePicker\";\nimport type { InputFieldStateValue, OnChangeCreateAction } from \"./types\";\nimport \"./NumberField.css\";\n\nexport type NumberFieldProps = {\n  label: string,\n  name: string,\n  onChangeCreateAction: OnChangeCreateAction,\n  valueAttributeInState: InputFieldStateValue\n};\nexport default function NumberField(props: NumberFieldProps) {\n  const { label, name, onChangeCreateAction, valueAttributeInState } = props;\n  return (\n    <DatePickerContext.Consumer>\n      {context => {\n        const { state, dispatch } = context;\n        return (\n          <div className=\"number\">\n            <label htmlFor={name}>{label}</label>\n            <Textfield\n              name={name}\n              type=\"number\"\n              value={state[valueAttributeInState]}\n              onChange={evt =>\n                dispatch(onChangeCreateAction({ value: evt.target.value }))\n              }\n              isCompact\n            />\n          </div>\n        );\n      }}\n    </DatePickerContext.Consumer>\n  );\n}\n","// @flow\nimport { dateIsAvailable } from \"./utils\";\nimport type {\n  Action,\n  GetNewProposedDate,\n  ReduceHidePicker,\n  ReduceShowPicker,\n  ReduceDatePartChanged,\n  ReduceOnDayChanged,\n  ReduceOnMonthChanged,\n  ReduceOnYearChanged,\n  ReduceSelectDate,\n  ReduceClearDate,\n  ReduceSetConstraints,\n  State\n} from \"./types\";\nimport {\n  CLEAR_DATE_ACTION,\n  HIDE_PICKER_ACTION,\n  SHOW_PICKER_ACTION,\n  ON_DAY_CHANGED_ACTION,\n  ON_MONTH_CHANGED_ACTION,\n  ON_YEAR_CHANGED_ACTION,\n  SELECT_DATE_ACTION,\n  SET_CONSTRAINTS_ACTION\n} from \"./types\";\n\nexport const getNewProposedDateForDayChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(proposedDate.getFullYear(), proposedDate.getMonth(), value);\n};\n\nexport const getNewProposedDateForMonthChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(\n    proposedDate.getFullYear(),\n    value - 1,\n    proposedDate.getDate()\n  );\n};\n\nexport const getNewProposedDateForYearChange: GetNewProposedDate = ({\n  proposedDate,\n  value\n}) => {\n  return new Date(value, proposedDate.getMonth(), proposedDate.getDate());\n};\n\nconst reduceDatePartChanged: ReduceDatePartChanged = ({\n  state,\n  action,\n  getNewProposedDate,\n  inputFieldStateValue\n}) => {\n  const { proposedDate, earliestAllowedDate, latestAllowedDate } = state;\n  let {\n    payload: { value }\n  } = action;\n\n  // TODO: Ideally need to do a better job handling strange characters:\n  //       - ignore zeros\n  //       - could we always have 2 character day and month? (with leading zeroes)\n  if (value === \"\") {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to provide a full date\",\n      [inputFieldStateValue]: value\n    };\n  }\n\n  const updatedProposedDate = getNewProposedDate({ proposedDate, value });\n\n  if (\n    !dateIsAvailable({\n      date: updatedProposedDate,\n      earliestAllowedDate,\n      latestAllowedDate\n    })\n  ) {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to select a date within the allowed range\",\n      proposedDate: updatedProposedDate,\n      dayInputFieldValue: updatedProposedDate.getDate(),\n      monthInputFieldValue: updatedProposedDate.getMonth() + 1,\n      yearInputFieldValue: updatedProposedDate.getFullYear()\n    };\n  }\n\n  return {\n    ...state,\n    isValid: true,\n    warning: \"\",\n    proposedDate: updatedProposedDate,\n    dayInputFieldValue: updatedProposedDate.getDate(),\n    monthInputFieldValue: updatedProposedDate.getMonth() + 1,\n    yearInputFieldValue: updatedProposedDate.getFullYear()\n  };\n};\n\nconst reduceOnDayChanged: ReduceOnDayChanged = ({ state, action }) => {\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForDayChange,\n    inputFieldStateValue: \"dayInputFieldValue\"\n  });\n};\n\nconst reduceOnMonthChanged: ReduceOnMonthChanged = ({ state, action }) => {\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForMonthChange,\n    inputFieldStateValue: \"monthInputFieldValue\"\n  });\n};\n\nconst reduceOnYearChanged: ReduceOnYearChanged = ({ state, action }) => {\n  let {\n    payload: { value }\n  } = action;\n  if (value === \"\" || value < 1000) {\n    return {\n      ...state,\n      isValid: false,\n      warning: \"You need to provide a full date\",\n      yearInputFieldValue: value\n    };\n  }\n  return reduceDatePartChanged({\n    state,\n    action,\n    getNewProposedDate: getNewProposedDateForYearChange,\n    inputFieldStateValue: \"yearInputFieldValue\"\n  });\n};\n\nconst reduceHidePicker: ReduceHidePicker = ({ state, action }) => {\n  const { isValid, proposedDate } = state;\n\n  if (!isValid) {\n    // If the picker isn't in a valid date when it's closed we need to ensure that\n    // it's reset. The proposed date should still be a valid date because it only gets\n    // updated when valid input is provided. It's important to reset validity and\n    // clear warnings and get back to a healthy state\n    return {\n      ...state,\n      proposedDate,\n      isValid: true,\n      warning: \"\",\n      pickerIsVisible: false,\n      dayInputFieldValue: proposedDate.getDate(),\n      monthInputFieldValue: proposedDate.getMonth() + 1,\n      yearInputFieldValue: proposedDate.getFullYear()\n    };\n  }\n\n  return {\n    ...state,\n    pickerIsVisible: false\n  };\n};\n\nconst reduceShowPicker: ReduceShowPicker = ({ state, action }) => {\n  return {\n    ...state,\n    pickerIsVisible: true\n  };\n};\n\nconst reduceSelectDate: ReduceSelectDate = ({ state, action }) => {\n  let {\n    payload: { date }\n  } = action;\n  const { earliestAllowedDate, latestAllowedDate } = state;\n\n  // Don't allow dates to be set if they are unavailable!\n  if (\n    !dateIsAvailable({\n      date,\n      earliestAllowedDate,\n      latestAllowedDate\n    })\n  ) {\n    return state;\n  }\n\n  const { onChange } = state;\n  if (onChange && typeof onChange === \"function\") {\n    onChange(date);\n  }\n\n  return {\n    ...state,\n    pickerIsVisible: false,\n    warning: \"\",\n    isValid: true,\n    selectedDate: date,\n    proposedDate: date,\n    dayInputFieldValue: date.getDate(),\n    monthInputFieldValue: date.getMonth() + 1,\n    yearInputFieldValue: date.getFullYear()\n  };\n};\n\nconst reduceClearDate: ReduceClearDate = ({ state, action }) => {\n  // It is important to call the onChange callback on clearing as well as setting...\n  const { onChange } = state;\n  if (onChange && typeof onChange === \"function\") {\n    onChange(undefined);\n  }\n\n  const date = new Date();\n  return {\n    ...state,\n    pickerIsVisible: false,\n    selectedDate: undefined,\n    proposedDate: date,\n    dayInputFieldValue: date.getDate(),\n    monthInputFieldValue: date.getMonth() + 1,\n    yearInputFieldValue: date.getFullYear()\n  };\n};\n\nexport const reduceSetConstraints: ReduceSetConstraints = ({\n  state,\n  action\n}) => {\n  // TODO: There is a potential issue here if the constraint makes the selected date invalid !\n  //       - One option would be to just bring the date within the constraint\n  const {\n    payload: { earliestAllowedDate, latestAllowedDate }\n  } = action;\n  return {\n    ...state,\n    earliestAllowedDate,\n    latestAllowedDate\n  };\n};\n\nexport function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case HIDE_PICKER_ACTION: {\n      return reduceHidePicker({ state, action });\n    }\n    case SHOW_PICKER_ACTION: {\n      return reduceShowPicker({ state, action });\n    }\n    case ON_DAY_CHANGED_ACTION: {\n      return reduceOnDayChanged({ state, action });\n    }\n    case ON_MONTH_CHANGED_ACTION: {\n      return reduceOnMonthChanged({ state, action });\n    }\n    case ON_YEAR_CHANGED_ACTION: {\n      return reduceOnYearChanged({ state, action });\n    }\n    case SELECT_DATE_ACTION: {\n      return reduceSelectDate({ state, action });\n    }\n    case CLEAR_DATE_ACTION: {\n      return reduceClearDate({ state, action });\n    }\n    case SET_CONSTRAINTS_ACTION: {\n      return reduceSetConstraints({ state, action });\n    }\n    default:\n      return state;\n  }\n}\n","// @flow\n\nimport React, { useReducer, useEffect, useRef } from \"react\";\nimport Popup from \"@atlaskit/popup\";\nimport Button, { ButtonGroup } from \"@atlaskit/button\";\nimport EditorEditIcon from \"@atlaskit/icon/glyph/editor/edit\";\nimport EditorDoneIcon from \"@atlaskit/icon/glyph/editor/done\";\nimport EditorCloseIcon from \"@atlaskit/icon/glyph/editor/close\";\nimport EditorRemoveIcon from \"@atlaskit/icon/glyph/editor/remove\";\nimport Calendar from \"./Calendar\";\nimport NumberField from \"./NumberField\";\nimport { reducer } from \"./reducer\";\nimport {\n  createClearDateAction,\n  createShowPickerAction,\n  createHidePickerAction,\n  createOnDayChangedAction,\n  createOnMonthChangedAction,\n  createOnYearChangedAction,\n  createSelectDateAction,\n  createSetConstraintsAction\n} from \"./actions\";\nimport type { CreateContext, DatePickerProps, State } from \"./types\";\nimport \"./DatePicker.css\";\n\n// $FlowFixMe\nexport const DatePickerContext = React.createContext();\n\nexport const createContext: CreateContext = ({ state, dispatch }) => ({\n  state,\n  dispatch\n});\n\nexport default function DatePicker(props: DatePickerProps) {\n  const { value, earliestAllowedDate, latestAllowedDate, onChange } = props;\n\n  const proposedDate = value || new Date(); // Default to today when there is no value provided\n\n  const dayInputFieldValue = proposedDate.getDate();\n  const monthInputFieldValue = proposedDate.getMonth() + 1; // Need to add 1 to move from 0 indexed months\n  const yearInputFieldValue = proposedDate.getFullYear();\n\n  const initialState: State = {\n    isValid: true,\n    pickerIsVisible: false,\n    selectedDate: value, // This could legitimately be undefined when no date is set\n    proposedDate,\n    dayInputFieldValue,\n    monthInputFieldValue,\n    yearInputFieldValue,\n    earliestAllowedDate,\n    latestAllowedDate,\n    onChange\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const context = createContext({ state, dispatch });\n\n  // This is an attempt to track changing in prop value, to update the selected date...\n  // However, this updates on each render and we need to be able to process more than once\n  const ref = useRef();\n  useEffect(() => {\n    const previousProps = ref.current;\n    if (previousProps) {\n      if (previousProps.value !== value) {\n        if (value) {\n          dispatch(createSelectDateAction({ date: value }));\n        } else {\n          dispatch(createClearDateAction());\n        }\n      }\n\n      const {\n        earliestAllowedDate: previousEarliestAllowedDate,\n        latestAllowedDate: previousLatestAllowedDate\n      } = previousProps;\n      if (\n        previousEarliestAllowedDate !== earliestAllowedDate ||\n        previousLatestAllowedDate !== latestAllowedDate\n      ) {\n        dispatch(\n          createSetConstraintsAction({\n            earliestAllowedDate,\n            latestAllowedDate\n          })\n        );\n      }\n    }\n    // TODO: Can only set a value via props once, because the prop isn't changing\n    ref.current = props;\n  });\n\n  const displayValue = state.selectedDate\n    ? state.selectedDate.toDateString()\n    : \"\";\n  return (\n    <DatePickerContext.Provider value={context}>\n      <Popup\n        isOpen={state.pickerIsVisible}\n        onClose={() => dispatch(createHidePickerAction())}\n        placement=\"bottom-start\"\n        content={() => (\n          <div className=\"main\">\n            <div className=\"picker\">\n              <div className=\"input-row\">\n                <NumberField\n                  label=\"Day\"\n                  name=\"day\"\n                  onChangeCreateAction={createOnDayChangedAction}\n                  valueAttributeInState=\"dayInputFieldValue\"\n                />\n                <NumberField\n                  label=\"Month\"\n                  name=\"month\"\n                  onChangeCreateAction={createOnMonthChangedAction}\n                  valueAttributeInState=\"monthInputFieldValue\"\n                />\n                <NumberField\n                  label=\"Year\"\n                  name=\"year\"\n                  onChangeCreateAction={createOnYearChangedAction}\n                  valueAttributeInState=\"yearInputFieldValue\"\n                />\n                <ButtonGroup>\n                  <Button\n                    iconBefore={<EditorDoneIcon size=\"small\" />}\n                    appearance=\"subtle\"\n                    isDisabled={!state.isValid}\n                    onClick={evt =>\n                      dispatch(\n                        createSelectDateAction({ date: state.proposedDate })\n                      )\n                    }\n                    spacing=\"compact\"\n                  />\n                  <Button\n                    iconBefore={<EditorCloseIcon size=\"small\" />}\n                    appearance=\"subtle\"\n                    onClick={evt => dispatch(createHidePickerAction())}\n                    spacing=\"compact\"\n                  />\n                </ButtonGroup>\n              </div>\n              <Calendar\n                date={state.proposedDate}\n                earliestAllowedDate={state.earliestAllowedDate}\n                latestAllowedDate={state.latestAllowedDate}\n              />\n              {state.warning && (\n                <div className=\"warnings\">\n                  <span>{state.warning}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        trigger={triggerProps => (\n          <div className=\"display\" {...triggerProps}>\n            <span onClick={evt => dispatch(createShowPickerAction())}>\n              {displayValue}\n            </span>\n            <ButtonGroup>\n              <Button\n                iconBefore={<EditorEditIcon size=\"small\" />}\n                isDisabled={!state.isValid}\n                onClick={evt => dispatch(createShowPickerAction())}\n                spacing=\"compact\"\n              />\n              <Button\n                iconBefore={<EditorRemoveIcon size=\"small\" />}\n                onClick={evt => dispatch(createClearDateAction())}\n                spacing=\"compact\"\n              />\n            </ButtonGroup>\n          </div>\n        )}\n      />\n    </DatePickerContext.Provider>\n  );\n}\n","// @flow\nimport React, { useState } from \"react\";\nimport DatePicker from \"./DatePicker\";\nimport \"./App.css\";\n\nconst initialDate = new Date();\nconst earliestAllowedDate = new Date();\nearliestAllowedDate.setDate(initialDate.getDate() - 45);\nconst latestAllowedDate = new Date();\nlatestAllowedDate.setDate(initialDate.getDate() + 45);\n\nconst inAWeek = new Date();\ninAWeek.setDate(initialDate.getDate() + 7);\n\nfunction App() {\n  const [date, setDate] = useState(initialDate);\n\n  const [earliest, setEarliest] = useState();\n  const [latest, setLatest] = useState();\n\n  return (\n    <div className=\"app\">\n      <h1>React Date Picker Examples</h1>\n      <p>\n        This page contains some examples of the React Date Picker with various\n        configurations.\n      </p>\n\n      <section>\n        <h4>No initial value, no constraints</h4>\n        <p>\n          This is an example picker with no initial value and no constraints\n        </p>\n        <DatePicker />\n      </section>\n\n      <section>\n        <h4>Today with constraints</h4>\n        <p>\n          This is an example picker that is set to today and contrained to\n          within 45 days before and after today. Use the button to set the date\n          by passing a new prop to the picker.\n        </p>\n        <button type=\"button\" onClick={() => setDate(inAWeek)}>\n          Set the date to a week from now\n        </button>\n        <p></p>\n        <DatePicker\n          value={date}\n          earliestAllowedDate={earliestAllowedDate}\n          latestAllowedDate={latestAllowedDate}\n          onChange={date => setDate(date)}\n        />\n      </section>\n\n      <section>\n        <h4>Setting a date range</h4>\n        <p>\n          This example shows two date pickers used together to allow a date\n          range to be set. When you set a date in the \"From\" date picker it will\n          set a latest date constraint on the \"To\" picker (and vice versa).\n        </p>\n        <div className=\"range\">\n          <label htmlFor=\"from\">From</label>\n          <DatePicker\n            id=\"from\"\n            latestAllowedDate={latest}\n            onChange={date => setEarliest(date)}\n          />\n          <label htmlFor=\"to\">To</label>\n          <DatePicker\n            id=\"to\"\n            earliestAllowedDate={earliest}\n            onChange={date => setLatest(date)}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}